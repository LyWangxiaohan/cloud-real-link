server:
  port: 8001

spring:
  application:
    name: cloud-account
  cloud:
    nacos:
      discovery:
        server-addr: 47.97.83.36:8848
        username: nacos
        password: nacos
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://47.97.83.36:3306/cloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
#    username: root
#    password: Wxh981112
  redis:
    client-type: jedis
    host: 47.97.83.36
    password: Wxh981112
    port: 6379
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 100
        # 连接池中的最大空闲连接
        max-idle: 100
        # 连接池中的最小空闲连接
        min-idle: 100
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 60000

  # 分库分表的配置
  shardingsphere:
    datasource:
      names: ds0
      # 第一个数据源的名称
      ds0:
        connectionTimeoutMilliseconds: 30000
        driver-class-name: com.mysql.cj.jdbc.Driver
        idleTimeoutMilliseconds: 60000
        jdbc-url: jdbc:mysql://47.97.83.36:3306/cloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        maintenanceIntervalMilliseconds: 30000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 50
        minPoolSize: 50
        password: Wxh981112
        type: com.zaxxer.hikari.HikariDataSource
        username: root
    props:
      # 打印执行的数据库以及语句
      sql:
        show: true

    sharding:
      tables:
        traffic:
          # 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}
          actual-data-nodes: ds0.traffic_$->{0..1}
          # 水平分表策略+行表达式分片
          table-strategy:
            # 行表达式
            inline:
              # 分表策略（无须代码了）：用的是Hash取模的方式
              algorithm-expression: traffic_$->{account_no % 2}
              # 分片键
              sharding-column: account_no
          #id生成策略
          key-generator:
            column: id
            props:
              # workerId也有一定可能性会重复，我们这里也可以在启动程序的时候通过JVM参数去控制，覆盖掉这个参数，语法是 ${JVM参数名称}
              worker:
                id: ${workId}
            #id生成策略
            type: SNOWFLAKE


##配置plus打印sql日志
#mybatis-plus:
#  configuration:
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

sms:
  app-code: b95a94a0e879489fabb1ce87c7696b8b
  template-id: M105EABDEC

# 阿里云oss配置
aliyun:
  oss:
    endpoint: oss-cn-hongkong.aliyuncs.com
    access-key-id: LTAI5tHLpKgJ7zFmCHerncf3
    access-key-secret: Ewp5EPk988drtJb4UOYWOhjgvfFq5U
    bucketname: cloud-real-link-hk